/* General Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    background-color: #f4f7f6;
    color: #333;
    display: flex;
    flex-direction: column;
    height: 100vh;
}

.container {
    display: flex;
    flex: 1;
    overflow: hidden;
}

/* Sidebar Styles */
.sidebar {
    width: 240px;
    background-color: #2c3e50;
    color: white;
    padding: 20px;
    display: flex;
    flex-direction: column;
    box-shadow: 2px 0 5px rgba(0,0,0,0.1);
    flex-shrink: 0;
}

.sidebar .logo {
    text-align: center;
    margin-bottom: 30px;
}

.sidebar .logo img {
    width: 150px;
}

.sidebar .menu {
    list-style: none;
    padding: 0;
    margin: 0;
    flex-grow: 1;
}

.sidebar .menu li {
    margin-bottom: 10px;
}

.sidebar .menu a {
    color: white;
    text-decoration: none;
    display: block;
    padding: 12px 15px;
    border-radius: 4px;
    transition: background-color 0.3s ease;
}

.sidebar .menu a:hover,
.sidebar .menu a.active {
    background-color: #34495e;
}

.sidebar .footer {
    text-align: center;
    font-size: 0.8em;
    padding-top: 20px;
    border-top: 1px solid #4a627a;
}

/* Main Content Styles */
.main-content {
    flex: 1;
    padding: 30px;
    overflow-y: auto;
    background-color: #ffffff;
}

header {
    margin-bottom: 30px;
}

header h1 {
    margin: 0;
    font-size: 2em;
    color: #2c3e50;
}

/* Dashboard Styles */
.dashboard-filters {
    display: flex;
    gap: 20px;
    margin-bottom: 25px;
    align-items: flex-end;
}

.dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.dashboard-card {
    background-color: #ffffff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    border: 1px solid #e0e0e0;
}

.dashboard-card h3 {
    margin-top: 0;
    font-size: 1.2em;
    color: #34495e;
}

.dashboard-card p {
    font-size: 2.5em;
    font-weight: 600;
    margin: 10px 0;
    color: #3498db;
}

.dashboard-card span {
    font-size: 0.9em;
    color: #7f8c8d;
}

.dashboard-card.chart-card {
    grid-column: span 2; /* 차트 카드가 더 넓게 표시되도록 */
}


/* Table Styles */
.table-container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    margin-top: 20px;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    padding: 15px;
    text-align: left;
    border: 1px solid #ddd;
}

thead {
    background-color: #34495e;
    color: white;
}

th {
    font-weight: 600;
}

tbody tr:nth-child(even) {
    background-color: #f9f9f9;
}

tbody tr:hover {
    background-color: #f1f1f1;
}

/* Form & Input Styles */
.form-section {
    background-color: white;
    padding: 25px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 30px;
}

.form-section h2 {
    margin-top: 0;
    margin-bottom: 20px;
    font-size: 1.5em;
    color: #2c3e50;
    border-bottom: 2px solid #e0e0e0;
    padding-bottom: 10px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #555;
}

.form-group input,
.form-group select {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    transition: border-color 0.3s ease;
    background-color: #fff;
}

.form-group input:focus,
.form-group select:focus {
    border-color: #3498db;
    outline: none;
}

/* Button Styles */
.button-group {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
}

button {
    padding: 12px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

.btn-primary {
    background-color: #3498db;
    color: white;
}

.btn-primary:hover {
    background-color: #2980b9;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.btn-secondary {
    background-color: #bdc3c7;
    color: #333;
}

.btn-secondary:hover {
    background-color: #a7b0b5;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.btn-danger {
    background-color: #e74c3c;
    color: white;
}

.btn-danger:hover {
    background-color: #c0392b;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}


/* Modal (Popup) Styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
    background-color: #fefefe;
    margin: 10% auto;
    padding: 30px;
    border: 1px solid #888;
    width: 80%;
    max-width: 700px;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    position: relative;
}

.close-button {
    color: #aaa;
    position: absolute;
    top: 15px;
    right: 25px;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close-button:hover,
.close-button:focus {
    color: black;
    text-decoration: none;
}

/* Total Quantity Display */
#total-quantity {
    font-size: 1.2em;
    font-weight: bold;
    text-align: right;
    margin-top: 15px;
    padding: 10px;
    background-color: #eaf2f8;
    border-radius: 5px;
    color: #2c3e50;
}
3. utils-v2.js 수정
사업부 정렬 로직, 카테고리 필터 로직을 추가하고 대시보드 데이터 로드 함수를 수정했습니다.

JavaScript

// Airtable 설정
const AIRTABLE_API_KEY = 'patE1jSQ92OShRZ6y.610d9d1d8653f6e3671710eba078e7c1063d2e2ddd4f2cbd18a9311c2a49aa4f';
const AIRTABLE_BASE_ID = 'appq4lQ9vpBiBdn93';

const base = new Airtable({ apiKey: AIRTABLE_API_KEY }).base(AIRTABLE_BASE_ID);

// --- Helper Functions ---
const getAirtableRecords = async (tableName, options = {}) => {
    try {
        const records = await base(tableName).select(options).all();
        return records.map(record => ({ id: record.id, ...record.fields }));
    } catch (err) {
        console.error(`Error fetching data from ${tableName}:`, err);
        alert(`${tableName} 데이터를 불러오는 중 오류가 발생했습니다.`);
        return [];
    }
};

const updateAirtableRecord = async (tableName, id, fields) => {
    try {
        const updatedRecord = await base(tableName).update(id, fields);
        return { id: updatedRecord.id, ...updatedRecord.fields };
    } catch (err) {
        console.error(`Error updating record in ${tableName}:`, err);
        alert('데이터 업데이트 중 오류가 발생했습니다.');
        throw err;
    }
};

const createAirtableRecord = async (tableName, fields) => {
    try {
        const createdRecord = await base(tableName).create([{ fields }]);
        return { id: createdRecord[0].id, ...createdRecord[0].fields };
    } catch (err) {
        console.error(`Error creating record in ${tableName}:`, err);
        alert('데이터 생성 중 오류가 발생했습니다.');
        throw err;
    }
};

const deleteAirtableRecord = async (tableName, id) => {
    try {
        await base(tableName).destroy(id);
    } catch (err) {
        console.error(`Error deleting record in ${tableName}:`, err);
        alert('데이터 삭제 중 오류가 발생했습니다.');
        throw err;
    }
};

// --- 대시보드 (main.html) ---
async function initializeDashboard() {
    const products = await getAirtableRecords('기본정보');
    populateFilters(products);
    
    // 필터 변경 시 대시보드 데이터 다시 로드
    document.getElementById('business-unit-filter').addEventListener('change', () => loadDashboardData(products));
    document.getElementById('category-filter').addEventListener('change', () => loadDashboardData(products));

    loadDashboardData(products); // 초기 데이터 로드
    loadProductionChart();
}

function populateFilters(products) {
    const businessUnitFilter = document.getElementById('business-unit-filter');
    const categoryFilter = document.getElementById('category-filter');

    // 1. 사업부 필터 채우기 (생활유통, OTC 순서)
    const businessUnits = ['생활유통', 'OTC'];
    businessUnits.forEach(unit => {
        const option = document.createElement('option');
        option.value = unit;
        option.textContent = unit;
        businessUnitFilter.appendChild(option);
    });

    // 2. 카테고리 필터 채우기
    const categories = [...new Set(products.map(p => p['카테고리']).filter(Boolean))].sort();
    categories.forEach(cat => {
        const option = document.createElement('option');
        option.value = cat;
        option.textContent = cat;
        categoryFilter.appendChild(option);
    });
}


async function loadDashboardData(allProducts) {
    const selectedBusinessUnit = document.getElementById('business-unit-filter').value;
    const selectedCategory = document.getElementById('category-filter').value;

    // 선택된 필터에 따라 제품 목록 필터링
    let filteredProducts = allProducts;
    if (selectedBusinessUnit !== 'all') {
        filteredProducts = filteredProducts.filter(p => p['사업부'] === selectedBusinessUnit);
    }
    if (selectedCategory !== 'all') {
        filteredProducts = filteredProducts.filter(p => p['카테고리'] === selectedCategory);
    }
    const filteredProductCodes = filteredProducts.map(p => p['품번']);

    // 1. 발주 현황
    const poStatus = await getAirtableRecords('발주현황', { filterByFormula: "NOT({입고여부})" });
    const pendingPo = poStatus.filter(p => filteredProductCodes.includes(p['품번']));
    document.getElementById('po-pending-count').textContent = pendingPo.length;
    
    // 2. 출고 요청 현황
    const shippingRequests = await getAirtableRecords('출고요청', { filterByFormula: "NOT({출고여부})" });
    const pendingShipping = shippingRequests.filter(s => filteredProductCodes.includes(s['품번']));
    document.getElementById('shipping-pending-count').textContent = pendingShipping.length;

    // 3. 재고 현황 (안전재고 임박)
    const inventory = await getAirtableRecords('재고조회');
    const lowStockItems = inventory.filter(item => 
        filteredProductCodes.includes(item['품번']) && 
        (item['현재고'] < item['안전재고'])
    );
    document.getElementById('low-stock-count').textContent = lowStockItems.length;
}


async function loadProductionChart() {
    const plans = await getAirtableRecords('생산계획');
    const monthlyData = {};

    plans.forEach(plan => {
        const month = new Date(plan['계획일자']).toISOString().slice(0, 7); // YYYY-MM
        if (!monthlyData[month]) {
            monthlyData[month] = { planned: 0, actual: 0 };
        }
        monthlyData[month].planned += plan['계획수량'] || 0;
        if (plan['생산여부']) {
            monthlyData[month].actual += plan['계획수량'] || 0; // 실제 생산량을 별도 필드 관리 안 할 경우 계획수량으로 대체
        }
    });

    const labels = Object.keys(monthlyData).sort();
    const plannedData = labels.map(m => monthlyData[m].planned);
    const actualData = labels.map(m => monthlyData[m].actual);

    const ctx = document.getElementById('production-chart')?.getContext('2d');
    if(ctx) {
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: '계획수량',
                        data: plannedData,
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    },
                    {
                        label: '생산실적',
                        data: actualData,
                        backgroundColor: 'rgba(75, 192, 192, 0.6)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
}


// --- 재고 현황 조회 (inventoryLookup.html) ---
async function loadInventoryData() {
    const tableBody = document.getElementById('inventory-table-body');
    if (!tableBody) return;

    const inventory = await getAirtableRecords('재고조회');
    tableBody.innerHTML = '';
    let totalQuantity = 0;

    inventory.forEach(item => {
        const row = document.createElement('tr');
        const currentStock = item['현재고'] || 0;
        totalQuantity += currentStock;

        row.innerHTML = `
            <td>${item['품번'] || ''}</td>
            <td>${item['품명'] || ''}</td>
            <td>${currentStock.toLocaleString()}</td>
            <td>${item['단위'] || ''}</td>
            <td>${item['최근 입고일'] || ''}</td>
        `;
        row.addEventListener('click', () => showItemDetails(item));
        tableBody.appendChild(row);
    });

    const totalQuantityDiv = document.getElementById('total-quantity');
    if(totalQuantityDiv) {
        totalQuantityDiv.textContent = `총 재고 수량: ${totalQuantity.toLocaleString()}`;
    }
}

function showItemDetails(item) {
    const modal = document.getElementById('item-details-modal');
    const modalBody = document.getElementById('modal-body');
    const modalTotal = document.getElementById('modal-total-quantity');

    if (!modal || !modalBody || !modalTotal) return;
    
    const currentStock = item['현재고'] || 0;

    modalBody.innerHTML = `
        <p><strong>품번:</strong> ${item['품번'] || ''}</p>
        <p><strong>품명:</strong> ${item['품명'] || ''}</p>
        <p><strong>규격:</strong> ${item['규격'] || ''}</p>
        <p><strong>단위:</strong> ${item['단위'] || ''}</p>
        <p><strong>최근 입고일:</strong> ${item['최근 입고일'] || ''}</p>
    `;

    modalTotal.innerHTML = `<p><strong>현재고:</strong> ${currentStock.toLocaleString()}</p>`;

    modal.style.display = 'block';

    const closeButton = modal.querySelector('.close-button');
    closeButton.onclick = () => {
        modal.style.display = 'none';
    };

    window.onclick = (event) => {
        if (event.target == modal) {
            modal.style.display = 'none';
        }
    };
}


// --- 생산 계획 관리 (productionPlan.html) ---
async function loadProductionPlans() {
    const tableBody = document.getElementById('plan-table-body');
    if (!tableBody) return;

    const plans = await getAirtableRecords('생산계획', { sort: [{ field: '계획일자', direction: 'desc' }] });
    const products = await getAirtableRecords('기본정보');
    const productMap = new Map(products.map(p => [p['품번'], p['품명']]));

    tableBody.innerHTML = '';
    plans.forEach(plan => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${plan['계획일자'] || ''}</td>
            <td>${plan['품번'] || ''}</td>
            <td>${productMap.get(plan['품번']) || '알 수 없음'}</td>
            <td>${(plan['계획수량'] || 0).toLocaleString()}</td>
            <td>${plan['생산여부'] ? '✔️' : '❌'}</td>
        `;
        row.addEventListener('click', () => showPlanDetails(plan.id));
        tableBody.appendChild(row);
    });
}

async function showPlanDetails(recordId) {
    const modal = document.getElementById('plan-details-modal');
    const modalBody = document.getElementById('modal-body-plan');
    if (!modal || !modalBody) return;

    const records = await getAirtableRecords('생산계획', { filterByFormula: `RECORD_ID() = '${recordId}'` });
    if (!records || records.length === 0) {
        alert('계획 정보를 찾을 수 없습니다.');
        return;
    }
    let plan = records[0];
    
    const products = await getAirtableRecords('기본정보');
    const product = products.find(p => p['품번'] === plan['품번']);

    const displayContent = () => {
        modalBody.innerHTML = `
            <p><strong>계획일자:</strong> ${plan['계획일자'] || ''}</p>
            <p><strong>품번:</strong> ${plan['품번'] || ''}</p>
            <p><strong>품명:</strong> ${product ? product['품명'] : '알 수 없음'}</p>
            <p><strong>계획수량:</strong> ${(plan['계획수량'] || 0).toLocaleString()}</p>
            <p><strong>생산여부:</strong> ${plan['생산여부'] ? '완료' : '미완료'}</p>
        `;
        document.getElementById('edit-plan-btn').style.display = 'inline-block';
        document.getElementById('delete-plan-btn').style.display = 'inline-block';
        document.getElementById('save-plan-btn').style.display = 'none';
        document.getElementById('cancel-edit-btn').style.display = 'none';
    };

    const editContent = () => {
        modalBody.innerHTML = `
            <div class="form-group">
                <label for="edit-plan-date">계획일자</label>
                <input type="date" id="edit-plan-date" class="form-control" value="${plan['계획일자'] || ''}">
            </div>
            <div class="form-group">
                <label for="edit-plan-quantity">계획수량</label>
                <input type="number" id="edit-plan-quantity" class="form-control" value="${plan['계획수량'] || 0}">
            </div>
             <div class="form-group">
                <label for="edit-production-status">생산여부</label>
                <select id="edit-production-status" class="form-control">
                    <option value="true" ${plan['생산여부'] ? 'selected' : ''}>완료</option>
                    <option value="false" ${!plan['생산여부'] ? 'selected' : ''}>미완료</option>
                </select>
            </div>
        `;
        document.getElementById('edit-plan-btn').style.display = 'none';
        document.getElementById('delete-plan-btn').style.display = 'none';
        document.getElementById('save-plan-btn').style.display = 'inline-block';
        document.getElementById('cancel-edit-btn').style.display = 'inline-block';
    };

    displayContent();
    modal.style.display = 'block';

    const editBtn = document.getElementById('edit-plan-btn');
    const deleteBtn = document.getElementById('delete-plan-btn');
    const saveBtn = document.getElementById('save-plan-btn');
    const cancelBtn = document.getElementById('cancel-edit-btn');

    editBtn.onclick = editContent;
    cancelBtn.onclick = displayContent;
    
    deleteBtn.onclick = async () => {
        if (confirm('정말로 이 계획을 삭제하시겠습니까?')) {
            await deleteAirtableRecord('생산계획', recordId);
            alert('계획이 삭제되었습니다.');
            modal.style.display = 'none';
            loadProductionPlans();
        }
    };
    
    saveBtn.onclick = async () => {
        const updatedFields = {
            '계획일자': document.getElementById('edit-plan-date').value,
            '계획수량': parseInt(document.getElementById('edit-plan-quantity').value, 10),
            '생산여부': document.getElementById('edit-production-status').value === 'true'
        };

        const updatedRecord = await updateAirtableRecord('생산계획', recordId, updatedFields);
        plan = updatedRecord; // 로컬 데이터 업데이트
        alert('계획이 성공적으로 수정되었습니다.');
        displayContent(); // 다시 디스플레이 모드로 전환
        loadProductionPlans(); // 테이블 새로고침
    };

    const closeButton = modal.querySelector('.close-button');
    closeButton.onclick = () => { modal.style.display = 'none'; };
    window.onclick = (event) => { if (event.target == modal) { modal.style.display = 'none'; } };
}

async function populateProductOptions() {
    const select = document.getElementById('product-code');
    if (!select) return;

    const products = await getAirtableRecords('기본정보');
    select.innerHTML = '<option value="">품목을 선택하세요</option>';
    products.forEach(p => {
        const option = document.createElement('option');
        option.value = p['품번'];
        option.textContent = `${p['품명']} (${p['품번']})`;
        select.appendChild(option);
    });
}

async function handlePlanSubmit(event) {
    event.preventDefault();
    const form = event.target;
    const newPlan = {
        '품번': form['product-code'].value,
        '계획일자': form['plan-date'].value,
        '계획수량': parseInt(form['plan-quantity'].value, 10),
        '생산여부': false
    };

    if (!newPlan['품번'] || !newPlan['계획일자'] || isNaN(newPlan['계획수량'])) {
        alert('모든 필드를 올바르게 입력해주세요.');
        return;
    }
    
    await createAirtableRecord('생산계획', newPlan);
    alert('새로운 생산 계획이 추가되었습니다.');
    form.reset();
    loadProductionPlans();
}

// --- 기타 페이지 로드 함수 ---
async function loadPoData() {
    const tableBody = document.getElementById('po-table-body');
    if (!tableBody) return;
    const data = await getAirtableRecords('발주현황');
    tableBody.innerHTML = data.map(record => `
        <tr>
            <td>${record['발주번호'] || ''}</td>
            <td>${record['발주일자'] || ''}</td>
            <td>${record['품번'] || ''}</td>
            <td>${record['품명'] || ''}</td>
            <td>${(record['발주수량'] || 0).toLocaleString()}</td>
            <td>${record['입고여부'] ? '✔️' : '❌'}</td>
        </tr>
    `).join('');
}

async function loadShippingRequestData() {
    const tableBody = document.getElementById('shipping-request-table-body');
    if (!tableBody) return;
    const data = await getAirtableRecords('출고요청');
    tableBody.innerHTML = data.map(record => `
        <tr>
            <td>${record['출하요청번호'] || ''}</td>
            <td>${record['요청일자'] || ''}</td>
            <td>${record['품번'] || ''}</td>
            <td>${record['품명'] || ''}</td>
            <td>${(record['요청수량'] || 0).toLocaleString()}</td>
            <td>${record['출고여부'] ? '✔️' : '❌'}</td>
        </tr>
    `).join('');
}

async function loadDeliveryHistoryData() {
    const tableBody = document.getElementById('delivery-history-table-body');
    if (!tableBody) return;
    const data = await getAirtableRecords('납품이력');
    tableBody.innerHTML = data.map(record => `
        <tr>
            <td>${record['납품일자'] || ''}</td>
            <td>${record['출하요청번호'] || ''}</td>
            <td>${record['품번'] || ''}</td>
            <td>${record['품명'] || ''}</td>
            <td>${(record['납품수량'] || 0).toLocaleString()}</td>
        </tr>
    `).join('');
}

// --- 페이지 로드 및 네비게이션 ---
document.addEventListener('DOMContentLoaded', () => {
    const path = window.location.pathname.split("/").pop();

    // 1. 현재 페이지에 따라 필요한 데이터 로드
    switch (path) {
        case 'main.html':
        case 'index.html':
        case '': // root path
            initializeDashboard();
            break;
        case 'poStatus.html':
            loadPoData();
            break;
        case 'inventoryLookup.html':
            loadInventoryData();
            break;
        case 'productionPlan.html':
            loadProductionPlans();
            populateProductOptions();
            document.getElementById('plan-form')?.addEventListener('submit', handlePlanSubmit);
            break;
        case 'shippingRequest.html':
            loadShippingRequestData();
            break;
        case 'deliveryHistory.html':
            loadDeliveryHistoryData();
            break;
    }
    
    // 2. 네비게이션 활성화 상태 업데이트
    const navLinks = document.querySelectorAll('.sidebar .menu a');
    let hasActive = false;
    navLinks.forEach(link => {
        link.classList.remove('active'); // 모든 링크에서 active 클래스 제거
        const linkPath = link.getAttribute('href');
        if (linkPath === path || (path === 'index.html' && linkPath === 'main.html') || (path === '' && linkPath === 'main.html')) {
            link.classList.add('active');
            hasActive = true;
        }
    });

    if (!hasActive) {
        // 기본값으로 main.html 활성화
        document.querySelector('.sidebar .menu a[href="main.html"]').classList.add('active');
    }
});
